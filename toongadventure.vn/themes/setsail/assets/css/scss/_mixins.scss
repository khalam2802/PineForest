////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// layout mixins - start

@mixin qodefRelativeHolderLayout($vertical-align: middle) {
    position: relative;
    display: inline-block;
    width: 100%;
    vertical-align: $vertical-align;
}

@mixin qodefAbsoluteHolderLayout() {
    position: absolute;
    display: block;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
}

@mixin qodefFlexBoxLayout($position: null, $align-items: null, $justify-content: null) {
    @if ($position) {
        position: $position;
    }
    
    @include qodefFlexLayout();
    
    @if ($align-items) {
        @include qodefFlexAlignItems($align-items);
    }
    
    @if ($justify-content) {
        @include qodefFlexJustifyContent($justify-content);
    }
}

@mixin qodefFlexContainer($align-items: null, $justify-content: null, $flex-direction: null, $flex-wrap: null, $align-content: null) {
	@include qodefFlexBoxLayout(null, $align-items, $justify-content);
	
	@if ($flex-direction) {
		flex-direction: $flex-direction;
	}
	
	@if ($flex-wrap) {
		flex-wrap: $flex-wrap;
	}
	
	@if ($align-content) {
		align-content: $align-content;
	}
}

@mixin qodefFlexLayout() {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
}

@mixin qodefInlineFlexLayout() {
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

@mixin qodefFlexItem($order: 0, $flex-grow: 0, $flex-shrink: 1, $flex-basis: auto) {
    order: $order;
    flex-grow: $flex-grow;
    flex-shrink: $flex-shrink;
    flex-basis: $flex-basis;
}

@mixin qodefFlexAlignItems($align-items) {
    $older-align-items: $align-items;
    
    @if ($align-items == 'flex-start') {
        $older-align-items: start;
    } @else if ($align-items == 'flex-end') {
        $older-align-items: end;
    }
    
    -webkit-box-align: $older-align-items;
    -webkit-align-items: $align-items;
    -ms-flex-align: $older-align-items;
    align-items: $align-items;
}

@mixin qodefFlexJustifyContent($justify-content) {
    $older-justify-content: $justify-content;
    
    @if ($justify-content == 'flex-start') {
        $older-justify-content: start;
    } @else if ($justify-content == 'flex-end') {
        $older-justify-content: end;
    }
    
    -webkit-box-pack: $older-justify-content;
    -webkit-justify-content: $justify-content;
    -ms-flex-pack: $older-justify-content;
    justify-content: $justify-content;
}

@mixin qodefTableLayout() {
    position: relative;
    display: table;
    table-layout: fixed;
    height: 100%;
    width: 100%;
}

@mixin qodefTableCellLayout($vertical-align: middle) {
    position: relative;
    display: table-cell;
    height: 100%;
    width: 100%;
    vertical-align: $vertical-align;
}

@mixin qodefTypographyLayout() {
    color: inherit;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    font-style: inherit;
    line-height: inherit;
    letter-spacing: inherit;
    text-transform: inherit;
}

// layout mixins - end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// transition mixins - start

@mixin qodefTransition($transition-param...) {
    -webkit-transition: $transition-param;
    -moz-transition: $transition-param;
    transition: $transition-param;
}

@mixin qodefTransitionTransform($transition-param...) {
    -webkit-transition: -webkit-transform $transition-param;
    -moz-transition: -moz-transform $transition-param;
    transition: transform $transition-param;
}

@mixin qodefTransform($transform-param...) {
    -webkit-transform: $transform-param;
    -moz-transform: $transform-param;
    transform: $transform-param;
}

@mixin qodefAnimation($animation-param...) {
    -webkit-animation: $animation-param;
    -moz-animation: $animation-param;
    animation: $animation-param;
}

@mixin qodefTransformOrigin($animation-param...) {
    -webkit-transform-origin: $animation-param;
    -moz-transform-origin: $animation-param;
    transform-origin: $animation-param;
}

// transition mixins - end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// checkbox mixins - start

$checkbox-size: 15px;
$checkbox-border-width: 1px;

%checkbox-style {
    position: relative;
    margin: 8px 0;
    line-height: 1;

    input[type=checkbox] {
        width: $checkbox-size;
        height: $checkbox-size;
        max-height: $checkbox-size;
        position: relative;
        display: inline-block;
        vertical-align: top;
        top: 0;
        left: 0;
        margin: 0;
    }

    input[type=checkbox] + label {
        position: absolute;
        top: 0;
        left: 0;
        display: inline-block;
        line-height: 0;
        pointer-events: none;
        cursor: pointer;
    }

    input[type=checkbox] + label span.qodef-label-text {
        display: inline-block;
        padding-left: 10px;
        line-height: $checkbox-size;
        color: $default-heading-color;
    }

    input[type=checkbox] + label .qodef-label-view {
        display: inline-block;
        vertical-align: top;
        width: $checkbox-size;
        height: $checkbox-size;
        background-color: $default-background-color;
        border: $checkbox-border-width solid $default-border-color;
        border-radius: 2px;
        cursor: pointer;
        box-sizing: border-box;

        &:hover {
            cursor: pointer;
        }
    }

    input[type=checkbox] + label .qodef-label-view:after {
        content: '';
        position: absolute;
        top: ($checkbox-size - ($checkbox-size / 2 - $checkbox-border-width)) / 2;
        left: ($checkbox-size - ($checkbox-size / 2 - $checkbox-border-width)) / 2;
        width: $checkbox-size / 2 - $checkbox-border-width;
        height: $checkbox-size / 2 - $checkbox-border-width;
        background-color: $first-main-color;
        opacity: 0;
        @include qodefTransition(opacity 0.3s ease-in-out);
    }

    input[type=checkbox]:checked + label .qodef-label-view:after {
        opacity: 1;
    }
}

// checkbox mixins - end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// common mixins - start

@mixin qodefBckImageStyle() {
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center center;
}

@mixin qodefImageOverlayHoverStyle($with-hover: true) {
    
    @if ($with-hover) {
        
        &:hover {
            
            &:after {
                opacity: 1;
            }
        }

        &:after {
            @include qodefAbsoluteHolderLayout();
            content: '';
            background-color: rgba(#fff, .25);
            opacity: 0;
            @include qodefTransition(opacity .2s ease-in-out);
        }

    } @else {
        @include qodefAbsoluteHolderLayout();
        content: '';
        background-color: rgba(#fff, .25);
        opacity: 0;
        @include qodefTransition(opacity .2s ease-in-out);
    }
}

@mixin qodefStandardPaginationStyle($list_type: null) {
    @include qodefRelativeHolderLayout(top);
    margin: 37px 0 0;
    clear: both;

    ul {
        @include qodefRelativeHolderLayout(top);
        padding: 0;
        margin: 0;
        list-style: none;
        text-align: center;

        li {
            position: relative;
            display: inline-block;
            vertical-align: top;
            margin: 0 8px;

            a {
                position: relative;
                display: inline-block;
                vertical-align: top;
                margin: 0;
                padding: 0;
                font-weight: 500;
	            color: #c1c1c1;
	            
	            &:hover {
		            color: $default-heading-color;
	            }
            }

            &.qodef-pag-active {
                
                a {
                    color: $default-heading-color;
                }
            }

            &.qodef-pag-prev,
            &.qodef-pag-next {
                margin: 0 1px;

                a {
                    font-size: 24px;
                    color: $default-heading-color;

                    span {
                        display: inline-block;
                        line-height: inherit;

                        &:before {
                            display: block;
                            line-height: inherit;
                        }
                    }
	                
	                &:hover {
		                color: $first-main-color;
	                }
    
                    .qodef-nav-label-next,
                    .qodef-nav-label-prev {
                        font-size: 16px;
                        vertical-align: top;
                    }
                }
            }

            @if ($list_type == 'shortcode') {
                
                &.qodef-pag-prev {
                    
                    a {
                        opacity: 0;
                        color: $default-heading-color;
                    }
                }

                &.qodef-pag-next {
                    
                    a {
                        opacity: 1;
                        color: $default-heading-color;
                    }
                }

            } @else if ($list_type == 'shop') {
                span {
                    position: relative;
                    display: inline-block;
                    vertical-align: top;
                    margin: 0;
                    padding: 0;
	                font-weight: 500;
                    color: $default-heading-color;
                }

                a {
                    
                    &.next,
                    &.prev {
	                    top: -1px;
                        font-size: 0;
                        line-height: 0;
	                    font-weight: 500;
	                    color: $default-heading-color;

                        &:before,
                        &:after {
                            display: inline-block;
	                        vertical-align: middle;
                        }
	                    
	                    &:hover {
		                    color: $first-main-color;
	                    }
                    }

                    &.prev {
                        margin-right: -3px;

                        &:before {
                            content: "\34";
	                        font-family: 'ElegantIcons'; // same icon pack as in our templates for pagination
	                        font-size: 24px;
	                        line-height: 26px;
	                        -webkit-font-smoothing: antialiased;
	                        -moz-osx-font-smoothing: grayscale;
                        }
	                    
	                    &:after {
		                    content: "prev";
		                    font-family: $default-text-font;
		                    font-size: 16px;
	                    }
                    }

                    &.next {
                        margin-left: -3px;

                        &:before {
	                        content: "next";
	                        font-family: $default-text-font;
	                        font-size: 16px;
                        }
	
	                    &:after {
		                    content: "\35";
		                    font-family: 'ElegantIcons'; // same icon pack as in our templates for pagination
		                    font-size: 24px;
		                    line-height: 26px;
		                    -webkit-font-smoothing: antialiased;
		                    -moz-osx-font-smoothing: grayscale;
	                    }
                    }
                }
            }
        }
    }
}

@mixin qodefButtonDefaultStyle() {
    position: relative;
    display: inline-block;
    vertical-align: middle;
    width: auto;
    margin: 0;
	font-size: 13px;
	line-height: 1.692307692307692em;
	font-weight: 600;
	letter-spacing: .1em;
    text-transform: uppercase;
    outline: none;
    box-sizing: border-box;
    @include qodefTransition(color .2s ease-in-out, background-color .2s ease-in-out, border-color .2s ease-in-out);
}

@mixin qodefButtonSize($size: medium) {
    
    @if ($size == 'small') {
        padding: 10px 42px;

    } @else if ($size == 'medium') {
	    padding: 14px 42px;

    } @else if ($size == 'large') {
	    padding: 18px 66px;

    } @else if ($size == 'huge') {
        display: block;
        width: 100%;
        text-align: center;
        padding: 14px 20px;
    }
}

@mixin qodefButtonTransparentColor() {
    color: $default-text-color;
    background-color: transparent;
}

@mixin qodefButtonSolidColor($important: null) {
    color: #fff $important;
    background-color: $first-main-color $important;
    border: 1px solid transparent $important;
}

@mixin qodefButtonSolidHoverColor($important: null) {
    color: #fff $important;
    background-color: $solid-button-hover-bg-color $important;
}

@mixin qodefButtonOutlineColor($important: null) {
    color: $first-main-color $important;
    background-color: transparent $important;
    border: 1px solid $first-main-color $important;
}

@mixin qodefButtonOutlineHoverColor($important: null) {
    color: #fff $important;
    background-color: $first-main-color $important;
    border-color: $first-main-color $important;
}

@mixin qodefPlaceholder {
    &::-webkit-input-placeholder {
        @content
    }

    &:-moz-placeholder {
        @content;

        opacity: 1;
    }
    &::-moz-placeholder {
        @content;

        opacity: 1;
    }
    &:-ms-input-placeholder {
        @content
    }
}

// common mixins - end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// mixins styles - start

%input-style {
    position: relative;
    width: 100%;
    margin: 0 0 $input-margin;
    padding: $input-vertical-padding $input-horizontal-padding;
    font-family: $default-text-font;
    font-size: 14px;
    font-weight: 400;
    line-height: calc(#{$input-height} - #{$input-vertical-padding} * 2);
    color: $additional-text-color;
    background-color: $additional-background-color;
    border: 0;
    border-radius: 0;
    outline: 0;
    cursor: auto;
    -webkit-appearance: none;
    box-sizing: border-box;
    @include qodefTransition(color 0.2s ease-in-out);

    &:focus {
        color: inherit;
    }

    @include qodefPlaceholder {
        color: inherit;
    }
}

@mixin qodefDefaultLinearGradient {
    opacity: 0.7;
    background: -moz-linear-gradient(to bottom,rgba(0,0,0,0) 57%,rgba(0, 0, 0, 0.67) 99%,rgba(0,0,0,.6) 100%); /* FF3.6-15 */
    background: -webkit-linear-gradient(to bottom,rgba(0,0,0,0) 57%,rgba(0, 0, 0, 0.67) 99%,rgba(0,0,0,.6) 100%); /* Chrome10-25,Safari5.1-6 */
    background: linear-gradient(to bottom,rgba(0,0,0,0) 57%,rgba(0, 0, 0, 0.67) 99%,rgba(0,0,0,.6) 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#00000000', endColorstr='#99000000',GradientType=0 ); /* IE6-9 */
}

@mixin qodefDefaultRadialGradient {
	background: -moz-radial-gradient(center, ellipse cover, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0) 43%); /* FF3.6-15 */
	background: -webkit-radial-gradient(center, ellipse cover, rgba(0,0,0,0.5) 0%,rgba(0,0,0,0) 43%); /* Chrome10-25,Safari5.1-6 */
	background: radial-gradient(ellipse at center, rgba(0,0,0,0.5) 0%,rgba(0,0,0,0) 43%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#80000000', endColorstr='#00000000',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */
}

// mixins styles - end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//media query mixins - start

@mixin laptop-landscape-large {
    @media only screen and (max-width: map-get($breakpoints, laptop-landscape-large)) {
        @content;
    }
}

@mixin laptop-landscape-mac {
    @media only screen and (max-width: map-get($breakpoints, laptop-landscape-mac)) {
        @content;
    }
}

@mixin laptop-landscape-medium {
    @media only screen and (max-width: map-get($breakpoints, laptop-landscape-medium)) {
        @content;
    }
}

@mixin laptop-landscape {
    @media only screen and (max-width: map-get($breakpoints, laptop-landscape)) {
        @content;
    }
}

@mixin ipad-landscape {
    @media only screen and (max-width: map-get($breakpoints, ipad-landscape)) {
        @content;
    }
}

@mixin ipad-portrait {
    @media only screen and (max-width: map-get($breakpoints, ipad-portrait)) {
        @content;
    }
}

@mixin phone-landscape {
    @media only screen and (max-width: map-get($breakpoints, phone-landscape)) {
        @content;
    }
}

@mixin phone-portrait {
    @media only screen and (max-width: map-get($breakpoints, phone-portrait)) {
        @content;
    }
}

@mixin smaller-phone-portrait {
    @media only screen and (max-width: map-get($breakpoints, smaller-phone-portrait)) {
        @content;
    }
}

// media query mixins - end

// animation mixin - start

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }

    @keyframes #{$name} {
        @content;
    }
}

@mixin animation($name, $duration, $repeat, $timing, $delay) {
    -webkit-animation-name: $name;
    -webkit-animation-duration: $duration;
    -webkit-animation-iteration-count: $repeat;
    -webkit-animation-timing-function: $timing;
    -webkit-animation-delay: $delay;
    -webkit-animation-fill-mode: forwards; // this prevents the animation from restarting!

    animation-name: $name;
    animation-duration: $duration;
    animation-iteration-count: $repeat;
    animation-timing-function: $timing;
    animation-delay: $delay;
    animation-fill-mode: forwards; // this prevents the animation from restarting!
}

// animation mixin - end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// heading mixins - start

@mixin qodefDefaultHeadingStyle() {
    @include qodefHeadingStyle();
    margin: 25px 0;
    
    a {
        @include qodefTypographyLayout();
        
        &:hover {
            color: $first-main-color;
        }
    }
}

@mixin qodefHeadingStyle($with-heading: null, $with-color: true) {
	
	@if($with-color) {
		color: $default-heading-color;
	}
    
    @if ($with-heading == 'h1') {
        @include qodefH1();
    } @else if ($with-heading == 'h2') {
        @include qodefH2();
    } @else if ($with-heading == 'h3') {
        @include qodefH3();
    } @else if ($with-heading == 'h4') {
        @include qodefH4();
    } @else if ($with-heading == 'h5') {
        @include qodefH5();
    } @else if ($with-heading == 'h6') {
        @include qodefH6();
    }
}

@mixin qodefH1() {
    font-size: 65px;
    line-height: 1.092307692307692em;
    font-weight: 600;
    letter-spacing: -0.05em;
}

@mixin qodefH2() {
    font-size: 40px;
    line-height: 1.15em;
    font-weight: 600;
    letter-spacing: -0.05em;
}

@mixin qodefH3() {
    font-size: 30px;
    line-height: 1.2em;
    font-weight: 600;
    letter-spacing: -0.05em;
}

@mixin qodefH4() {
    font-size: 22px;
    line-height: 1.272727272727273em;
    font-weight: 600;
    letter-spacing: -0.05em;
}

@mixin qodefH5() {
    font-size: 18px;
    line-height: 1.333333333333333em;
    font-weight: 600;
}

@mixin qodefH6() {
    font-size: 14px;
    line-height: 1.428571428571429em;
    font-weight: 600;
}

@mixin qodefH7() {
    font-family: $additional-text-font;
    font-size: 13px;
    line-height: 1.692307692307692em;
	font-weight: 800;
    letter-spacing: .1em;
}

// heading mixins - end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////